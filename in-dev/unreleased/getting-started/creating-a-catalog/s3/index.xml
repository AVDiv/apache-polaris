<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Creating a catalog on S3 compatible cloud providers on Apache Polaris</title><link>https://polaris.apache.org/in-dev/unreleased/getting-started/creating-a-catalog/s3/</link><description>Recent content in Creating a catalog on S3 compatible cloud providers on Apache Polaris</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://polaris.apache.org/in-dev/unreleased/getting-started/creating-a-catalog/s3/index.xml" rel="self" type="application/rss+xml"/><item><title>Creating a catalog on AWS S3</title><link>https://polaris.apache.org/in-dev/unreleased/getting-started/creating-a-catalog/s3/catalog-aws/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://polaris.apache.org/in-dev/unreleased/getting-started/creating-a-catalog/s3/catalog-aws/</guid><description>example CLIENT_ID=root \ CLIENT_SECRET=s3cr3t \ DEFAULT_BASE_LOCATION=s3://example-bucket/my_data \ ROLE_ARN=arn:aws:iam::111122223333:role/ExampleCorpRole \ REGION=us-west-2 \ EXTERNAL_ID=12345678901234567890 \ ./polaris \ --client-id ${CLIENT_ID} \ --client-secret ${CLIENT_SECRET} \ catalogs \ create \ --storage-type s3 \ --default-base-location ${DEFAULT_BASE_LOCATION} \ --role-arn ${ROLE_ARN} \ --region ${REGION} \ --external-id ${EXTERNAL_ID} \ my_aws_catalog</description></item><item><title>Creating a catalog on MinIO</title><link>https://polaris.apache.org/in-dev/unreleased/getting-started/creating-a-catalog/s3/catalog-minio/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://polaris.apache.org/in-dev/unreleased/getting-started/creating-a-catalog/s3/catalog-minio/</guid><description>In this guide we walk through setting up a simple Polaris Server with local MinIO storage.
Similar configurations are expected to work with other S3-compatible systems that also have the STS API.
Setup Clone the Polaris source repository, then build a docker image for Polaris.
./gradlew :polaris-server:assemble -Dquarkus.container-image.build=true Start MinIO with Polaris using the docker compose example.
docker compose -f getting-started/minio/docker-compose.yml up The compose script will start MinIO on default ports (API on 9000, UI on 9001) plus a Polaris Server pre-configured to that MinIO instance.</description></item></channel></rss>