[{"body":" Upcoming Meetings We have bi-weekly community meeting using Google Meet.\nJoin Polaris Community Sync invite.\nScheduled Meetings Agenda for upcoming Community Meetings\nGoogle Meet Link\nDate Time 2025-01-23\n9:00 AM PST 18:00 CET\n2025-02-06\n9:00 AM PST 18:00 CET\n2025-02-20\n9:00 AM PST 18:00 CET\n2025-03-06\n9:00 AM PST 18:00 CET\n2025-03-20\n9:00 AM PST 18:00 CET\n2025-04-03\n9:00 AM PST 18:00 CET\n…​\nPast Meetings Date Notes Recording 2025-01-09\nMeeting Notes\nhttps://drive.google.com/file/d/1p1OFXwIiBXo_qiQoP_T-qNn9tkBXkq_p/view?usp=sharing\n2024-12-12\nMeeting Notes\nhttps://drive.google.com/file/d/1OJiOnn9otN36tgibTMk73wSl01wEak9M/view?usp=sharing\n2024-11-14\nMeeting Notes\nhttps://drive.google.com/file/d/1a2B5c0hychdRuIcNSl2ltEkoH3VcR0J1/view?usp=sharing\n2024-10-31\nMeeting Notes\nhttps://drive.google.com/file/d/1yZkcs8iif2QOFqWhr6rWOKyGJAoIR8aX/view?usp=drive_link\n2024-10-17\nMeeting Notes\n(no recording)\n","categories":"","description":"","excerpt":" Upcoming Meetings We have bi-weekly community meeting using Google …","ref":"/community/meetings/","tags":"","title":"Apache Polaris Community Meetings"},{"body":"This guide serves as a introduction to several key entities that can be managed with Apache Polaris (Incubating), describes how to build and deploy Polaris locally, and finally includes examples of how to use Polaris with Apache Spark™.\nPrerequisites This guide covers building Polaris, deploying it locally or via Docker, and interacting with it using the command-line interface and Apache Spark. Before proceeding with Polaris, be sure to satisfy the relevant prerequisites listed here.\nBuilding and Deploying Polaris To get the latest Polaris code, you’ll need to clone the repository using git. You can install git using homebrew:\nbrew install git Then, use git to clone the Polaris repo:\ncd ~ git clone https://github.com/apache/polaris.git With Docker If you plan to deploy Polaris inside Docker, you’ll need to install docker itself. For example, this can be done using homebrew:\nbrew install --cask docker Once installed, make sure Docker is running.\nFrom Source If you plan to build Polaris from source yourself, you will need to satisfy a few prerequisites first.\nPolaris is built using gradle and is compatible with Java 21. We recommend the use of jenv to manage multiple Java versions. For example, to install Java 21 via homebrew and configure it with jenv:\ncd ~/polaris brew install openjdk@21 jenv jenv add $(brew --prefix openjdk@21) jenv local 21 Connecting to Polaris Polaris is compatible with any Apache Iceberg client that supports the REST API. Depending on the client you plan to use, refer to the prerequisites below.\nWith Spark If you want to connect to Polaris with Apache Spark, you’ll need to start by cloning Spark. As above, make sure git is installed first. You can install it with homebrew:\nbrew install git Then, clone Spark and check out a versioned branch. This guide uses Spark 3.5.\ncd ~ git clone https://github.com/apache/spark.git cd ~/spark git checkout branch-3.5 Deploying Polaris Polaris can be deployed via a lightweight docker image or as a standalone process. Before starting, be sure that you’ve satisfied the relevant prerequisites detailed above.\nDocker Image To start using Polaris in Docker, launch Polaris while Docker is running:\ncd ~/polaris docker compose -f docker-compose.yml up --build Once the polaris-polaris container is up, you can continue to Defining a Catalog.\nBuilding Polaris Run Polaris locally with:\ncd ~/polaris ./gradlew runApp You should see output for some time as Polaris builds and starts up. Eventually, you won’t see any more logs and should see messages that resemble the following:\nINFO [...] [main] [] o.e.j.s.handler.ContextHandler: Started i.d.j.MutableServletContextHandler@... INFO [...] [main] [] o.e.j.server.AbstractConnector: Started application@... INFO [...] [main] [] o.e.j.server.AbstractConnector: Started admin@... INFO [...] [main] [] o.eclipse.jetty.server.Server: Started Server@... At this point, Polaris is running.\nBootstrapping Polaris For this tutorial, we’ll launch an instance of Polaris that stores entities only in-memory. This means that any entities that you define will be destroyed when Polaris is shut down. It also means that Polaris will automatically bootstrap itself with root credentials. For more information on how to configure Polaris for production usage, see the docs.\nWhen Polaris is launched using in-memory mode the root principal credentials can be found in stdout on initial startup. For example:\nrealm: default-realm root principal credentials: \u003cclient-id\u003e:\u003cclient-secret\u003e Be sure to note of these credentials as we’ll be using them below. You can also set these credentials as environment variables for use with the Polaris CLI:\nexport CLIENT_ID=\u003cclient-id\u003e export CLIENT_SECRET=\u003cclient-secret\u003e Defining a Catalog In Polaris, the catalog is the top-level entity that objects like tables and views are organized under. With a Polaris service running, you can create a catalog like so:\ncd ~/polaris ./polaris \\ --client-id ${CLIENT_ID} \\ --client-secret ${CLIENT_SECRET} \\ catalogs \\ create \\ --storage-type s3 \\ --default-base-location ${DEFAULT_BASE_LOCATION} \\ --role-arn ${ROLE_ARN} \\ quickstart_catalog This will create a new catalog called quickstart_catalog.\nThe DEFAULT_BASE_LOCATION you provide will be the default location that objects in this catalog should be stored in, and the ROLE_ARN you provide should be a Role ARN with access to read and write data in that location. These credentials will be provided to engines reading data from the catalog once they have authenticated with Polaris using credentials that have access to those resources.\nIf you’re using a storage type other than S3, such as Azure, you’ll provide a different type of credential than a Role ARN. For more details on supported storage types, see the docs.\nAdditionally, if Polaris is running somewhere other than localhost:8181, you can specify the correct hostname and port by providing --host and --port flags. For the full set of options supported by the CLI, please refer to the docs.\nCreating a Principal and Assigning it Privileges With a catalog created, we can create a principal that has access to manage that catalog. For details on how to configure the Polaris CLI, see the section above or refer to the docs.\n./polaris \\ --client-id ${CLIENT_ID} \\ --client-secret ${CLIENT_SECRET} \\ principals \\ create \\ quickstart_user ./polaris \\ --client-id ${CLIENT_ID} \\ --client-secret ${CLIENT_SECRET} \\ principal-roles \\ create \\ quickstart_user_role ./polaris \\ --client-id ${CLIENT_ID} \\ --client-secret ${CLIENT_SECRET} \\ catalog-roles \\ create \\ --catalog quickstart_catalog \\ quickstart_catalog_role Be sure to provide the necessary credentials, hostname, and port as before.\nWhen the principals create command completes successfully, it will return the credentials for this new principal. Be sure to note these down for later. For example:\n./polaris ... principals create example {\"clientId\": \"XXXX\", \"clientSecret\": \"YYYY\"} Now, we grant the principal the principal role we created, and grant the catalog role the principal role we created. For more information on these entities, please refer to the linked documentation.\n./polaris \\ --client-id ${CLIENT_ID} \\ --client-secret ${CLIENT_SECRET} \\ principal-roles \\ grant \\ --principal quickstart_user \\ quickstart_user_role ./polaris \\ --client-id ${CLIENT_ID} \\ --client-secret ${CLIENT_SECRET} \\ catalog-roles \\ grant \\ --catalog quickstart_catalog \\ --principal-role quickstart_user_role \\ quickstart_catalog_role Now, we’ve linked our principal to the catalog via roles like so:\nIn order to give this principal the ability to interact with the catalog, we must assign some privileges. For the time being, we will give this principal the ability to fully manage content in our new catalog. We can do this with the CLI like so:\n./polaris \\ --client-id ${CLIENT_ID} \\ --client-secret ${CLIENT_SECRET} \\ privileges \\ catalog \\ grant \\ --catalog quickstart_catalog \\ --catalog-role quickstart_catalog_role \\ CATALOG_MANAGE_CONTENT This grants the catalog privileges CATALOG_MANAGE_CONTENT to our catalog role, linking everything together like so:\nCATALOG_MANAGE_CONTENT has create/list/read/write privileges on all entities within the catalog. The same privilege could be granted to a namespace, in which case the principal could create/list/read/write any entity under that namespace.\nUsing Iceberg \u0026 Polaris At this point, we’ve created a principal and granted it the ability to manage a catalog. We can now use an external engine to assume that principal, access our catalog, and store data in that catalog using Apache Iceberg.\nConnecting with Spark To use a Polaris-managed catalog in Apache Spark, we can configure Spark to use the Iceberg catalog REST API.\nThis guide uses Apache Spark 3.5, but be sure to find the appropriate iceberg-spark package for your Spark version. From a local Spark clone on the branch-3.5 branch we can run the following:\nNote: the credentials provided here are those for our principal, not the root credentials.\nbin/spark-shell \\ --packages org.apache.iceberg:iceberg-spark-runtime-3.5_2.12:1.7.1,org.apache.hadoop:hadoop-aws:3.4.0 \\ --conf spark.sql.extensions=org.apache.iceberg.spark.extensions.IcebergSparkSessionExtensions \\ --conf spark.sql.catalog.quickstart_catalog.warehouse=quickstart_catalog \\ --conf spark.sql.catalog.quickstart_catalog.header.X-Iceberg-Access-Delegation=vended-credentials \\ --conf spark.sql.catalog.quickstart_catalog=org.apache.iceberg.spark.SparkCatalog \\ --conf spark.sql.catalog.quickstart_catalog.catalog-impl=org.apache.iceberg.rest.RESTCatalog \\ --conf spark.sql.catalog.quickstart_catalog.uri=http://localhost:8181/api/catalog \\ --conf spark.sql.catalog.quickstart_catalog.credential='XXXX:YYYY' \\ --conf spark.sql.catalog.quickstart_catalog.scope='PRINCIPAL_ROLE:ALL' \\ --conf spark.sql.catalog.quickstart_catalog.token-refresh-enabled=true \\ --conf spark.sql.catalog.quickstart_catalog.client.region=us-west-2 Replace XXXX and YYYY with the client ID and client secret generated when you created the quickstart_user principal.\nSimilar to the CLI commands above, this configures Spark to use the Polaris running at localhost:8181. If your Polaris server is running elsewhere, but sure to update the configuration appropriately.\nFinally, note that we include the hadoop-aws package here. If your table is using a different filesystem, be sure to include the appropriate dependency.\nOnce the Spark session starts, we can create a namespace and table within the catalog:\nspark.sql(\"USE quickstart_catalog\") spark.sql(\"CREATE NAMESPACE IF NOT EXISTS quickstart_namespace\") spark.sql(\"CREATE NAMESPACE IF NOT EXISTS quickstart_namespace.schema\") spark.sql(\"USE NAMESPACE quickstart_namespace.schema\") spark.sql(\"\"\" CREATE TABLE IF NOT EXISTS quickstart_table ( id BIGINT, data STRING ) USING ICEBERG \"\"\") We can now use this table like any other:\nspark.sql(\"INSERT INTO quickstart_table VALUES (1, 'some data')\") spark.sql(\"SELECT * FROM quickstart_table\").show(false) . . . +---+---------+ |id |data | +---+---------+ |1 |some data| +---+---------+ If at any time access is revoked…\n./polaris \\ --client-id ${CLIENT_ID} \\ --client-secret ${CLIENT_SECRET} \\ privileges \\ catalog \\ revoke \\ --catalog quickstart_catalog \\ --catalog-role quickstart_catalog_role \\ CATALOG_MANAGE_CONTENT Spark will lose access to the table:\nspark.sql(\"SELECT * FROM quickstart_table\").show(false) org.apache.iceberg.exceptions.ForbiddenException: Forbidden: Principal 'quickstart_user' with activated PrincipalRoles '[]' and activated ids '[6, 7]' is not authorized for op LOAD_TABLE_WITH_READ_DELEGATION ","categories":"","description":"","excerpt":"This guide serves as a introduction to several key entities that can …","ref":"/in-dev/unreleased/quickstart/","tags":"","title":"Quick Start"},{"body":"","categories":"","description":"","excerpt":"","ref":"/blog/","tags":"","title":"Apache Polaris Blog"},{"body":"","categories":"","description":"","excerpt":"","ref":"/guides/","tags":"","title":"Apache Polaris Guides"},{"body":" Warning These pages refer to the current state of the main branch, which is still under active development.\nFunctionalities can be changed, removed or added without prior notice.\nCheck out the Quick Start page to get started.\n","categories":"","description":"","excerpt":" Warning These pages refer to the current state of the main branch, …","ref":"/in-dev/unreleased/","tags":"","title":"Unreleased - current state of the main branch"},{"body":"Apache Polaris (Incubating) is a catalog implementation for Apache Iceberg™ tables and is built on the open source Apache Iceberg™ REST protocol.\nWith Polaris, you can provide centralized, secure read and write access to your Iceberg tables across different REST-compatible query engines.\nKey concepts This section introduces key concepts associated with using Apache Polaris (Incubating).\nIn the following diagram, a sample Apache Polaris (Incubating) structure with nested namespaces is shown for Catalog1. No tables or namespaces have been created yet for Catalog2 or Catalog3.\nCatalog In Polaris, you can create one or more catalog resources to organize Iceberg tables.\nConfigure your catalog by setting values in the storage configuration for S3, Azure, or Google Cloud Storage. An Iceberg catalog enables a query engine to manage and organize tables. The catalog forms the first architectural layer in the Apache Iceberg™ table specification and must support the following tasks:\nStoring the current metadata pointer for one or more Iceberg tables. A metadata pointer maps a table name to the location of that table’s current metadata file.\nPerforming atomic operations so that you can update the current metadata pointer for a table to the metadata pointer of a new version of the table.\nTo learn more about Iceberg catalogs, see the Apache Iceberg™ documentation.\nCatalog types A catalog can be one of the following two types:\nInternal: The catalog is managed by Polaris. Tables from this catalog can be read and written in Polaris.\nExternal: The catalog is externally managed by another Iceberg catalog provider (for example, Snowflake, Glue, Dremio Arctic). Tables from this catalog are synced to Polaris. These tables are read-only in Polaris. In the current release, only a Snowflake external catalog is provided.\nA catalog is configured with a storage configuration that can point to S3, Azure storage, or GCS.\nNamespace You create namespaces to logically group Iceberg tables within a catalog. A catalog can have multiple namespaces. You can also create nested namespaces. Iceberg tables belong to namespaces.\nApache Iceberg™ tables and catalogs In an internal catalog, an Iceberg table is registered in Polaris, but read and written via query engines. The table data and metadata is stored in your external cloud storage. The table uses Polaris as the Iceberg catalog.\nIf you have tables housed in another Iceberg catalog, you can sync these tables to an external catalog in Polaris. If you sync this catalog to Polaris, it appears as an external catalog in Polaris. Clients connecting to the external catalog can read from or write to these tables. However, clients connecting to Polaris will only be able to read from these tables.\nImportant\nFor the access privileges defined for a catalog to be enforced correctly, the following conditions must be met:\nThe directory only contains the data files that belong to a single table. The directory hierarchy matches the namespace hierarchy for the catalog. For example, if a catalog includes the following items:\nTop-level namespace namespace1 Nested namespace namespace1a A customers table, which is grouped under nested namespace namespace1a An orders table, which is grouped under nested namespace namespace1a The directory hierarchy for the catalog must follow this structure:\n/namespace1/namespace1a/customers/\u003cfiles for the customers table only\u003e /namespace1/namespace1a/orders/\u003cfiles for the orders table only\u003e Service principal A service principal is an entity that you create in Polaris. Each service principal encapsulates credentials that you use to connect to Polaris.\nQuery engines use service principals to connect to catalogs.\nPolaris generates a Client ID and Client Secret pair for each service principal.\nThe following table displays example service principals that you might create in Polaris:\nService connection name Purpose Flink ingestion For Apache Flink® to ingest streaming data into Apache Iceberg™ tables. Spark ETL pipeline For Apache Spark™ to run ETL pipeline jobs on Iceberg tables. Snowflake data pipelines For Snowflake to run data pipelines for transforming data in Apache Iceberg™ tables. Trino BI dashboard For Trino to run BI queries for powering a dashboard. Snowflake AI team For Snowflake to run AI jobs on data in Apache Iceberg™ tables. Service connection A service connection represents a REST-compatible engine (such as Apache Spark™, Apache Flink®, or Trino) that can read from and write to Polaris Catalog. When creating a new service connection, the Polaris administrator grants the service principal that is created with the new service connection either a new or existing principal role. A principal role is a resource in Polaris that you can use to logically group Polaris service principals together and grant privileges on securable objects. For more information, see Principal role. Polaris uses a role-based access control (RBAC) model to grant service principals access to resources. For more information, see Access control. For a diagram of this model, see RBAC model.\nIf the Polaris administrator grants the service principal for the new service connection a new principal role, the service principal doesn’t have any privileges granted to it yet. When securing the catalog that the new service connection will connect to, the Polaris administrator grants privileges to catalog roles and then grants these catalog roles to the new principal role. As a result, the service principal for the new service connection has these privileges. For more information about catalog roles, see Catalog role.\nIf the Polaris administrator grants an existing principal role to the service principal for the new service connection, the service principal has the same privileges granted to the catalog roles that are granted to the existing principal role. If needed, the Polaris administrator can grant additional catalog roles to the existing principal role or remove catalog roles from it to adjust the privileges bestowed to the service principal. For an example of how RBAC works in Polaris, see RBAC example.\nStorage configuration A storage configuration stores a generated identity and access management (IAM) entity for your external cloud storage and is created when you create a catalog. The storage configuration is used to set the values to connect Polaris to your cloud storage. During the catalog creation process, an IAM entity is generated and used to create a trust relationship between the cloud storage provider and Polaris Catalog.\nWhen you create a catalog, you supply the following information about your external cloud storage:\nCloud storage provider Information Amazon S3 Default base location for your Amazon S3 bucketLocations for your Amazon S3 bucketS3 role ARNExternal ID (optional) Google Cloud Storage (GCS) Default base location for your GCS bucketLocations for your GCS bucket Azure Default base location for your Microsoft Azure containerLocations for your Microsoft Azure containerAzure tenant ID Example workflow In the following example workflow, Bob creates an Apache Iceberg™ table named Table1 and Alice reads data from Table1.\nBob uses Apache Spark™ to create the Table1 table under the Namespace1 namespace in the Catalog1 catalog and insert values into Table1.\nBob can create Table1 and insert data into it because he is using a service connection with a service principal that has the privileges to perform these actions.\nAlice uses Snowflake to read data from Table1.\nAlice can read data from Table1 because she is using a service connection with a service principal with a catalog integration that has the privileges to perform this action. Alice creates an unmanaged table in Snowflake to read data from Table1.\nSecurity and access control This section describes security and access control.\nCredential vending To secure interactions with service connections, Polaris vends temporary storage credentials to the query engine during query execution. These credentials allow the query engine to run the query without requiring access to your external cloud storage for Iceberg tables. This process is called credential vending.\nAs of now, the following limitation is known regarding Apache Iceberg support:\nremove_orphan_files: Apache Spark can’t use credential vending for this due to a known issue. See apache/iceberg#7914 for details. Identity and access management (IAM) Polaris uses the identity and access management (IAM) entity to securely connect to your storage for accessing table data, Iceberg metadata, and manifest files that store the table schema, partitions, and other metadata. Polaris retains the IAM entity for your storage location.\nAccess control Polaris enforces the access control that you configure across all tables registered with the service and governs security for all queries from query engines in a consistent manner.\nPolaris uses a role-based access control (RBAC) model that lets you centrally configure access for Polaris service principals to catalogs, namespaces, and tables.\nPolaris RBAC uses two different role types to delegate privileges:\nPrincipal roles: Granted to Polaris service principals and analogous to roles in other access control systems that you grant to service principals.\nCatalog roles: Configured with certain privileges on Polaris catalog resources and granted to principal roles.\nFor more information, see Access control.\nLegal Notices Apache®, Apache Iceberg™, Apache Spark™, Apache Flink®, and Flink® are either registered trademarks or trademarks of the Apache Software Foundation in the United States and/or other countries.\n","categories":"","description":"","excerpt":"Apache Polaris (Incubating) is a catalog implementation for Apache …","ref":"/in-dev/unreleased/overview/","tags":"","title":"Overview"},{"body":" Active Proposals Topic Date Created Proposal Document Dev-list discussion Sample topic placeholder\n2024/09/06\nLink to Google Doc\nLink to dev-mailing list discussion\nPrevious Proposals Topic Date Created Proposal Document Dev-list discussion + vote Resolution Sample topic placeholder\n2024/09/06\nLink to Google Doc\nLink to dev-mailing list discussion\nAccepted\n","categories":"","description":"","excerpt":" Active Proposals Topic Date Created Proposal Document Dev-list …","ref":"/community/proposals/","tags":"","title":"Apache Polaris Proposals"},{"body":" Contributor Code of Conduct This is a copy of the Contributor Covenant v2.1. No changes have been made.\nOur Pledge We as members, contributors, and leaders pledge to make participation in our community a harassment-free experience for everyone, regardless of age, body size, visible or invisible disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, caste, color, religion, or sexual identity and orientation.\nWe pledge to act and interact in ways that contribute to an open, welcoming, diverse, inclusive, and healthy community.\nOur Standards Examples of behavior that contributes to a positive environment for our community include:\nDemonstrating empathy and kindness toward other people Being respectful of differing opinions, viewpoints, and experiences Giving and gracefully accepting constructive feedback Accepting responsibility and apologizing to those affected by our mistakes, and learning from the experience Focusing on what is best not just for us as individuals, but for the overall community Examples of unacceptable behavior include:\nThe use of sexualized language or imagery, and sexual attention or advances of any kind Trolling, insulting or derogatory comments, and personal or political attacks Public or private harassment Publishing others’ private information, such as a physical or email address, without their explicit permission Other conduct which could reasonably be considered inappropriate in a professional setting Enforcement Responsibilities Community leaders are responsible for clarifying and enforcing our standards of acceptable behavior and will take appropriate and fair corrective action in response to any behavior that they deem inappropriate, threatening, offensive, or harmful.\nCommunity leaders have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, and will communicate reasons for moderation decisions when appropriate.\nScope This Code of Conduct applies within all community spaces, and also applies when an individual is officially representing the community in public spaces. Examples of representing our community include using an official e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event.\nEnforcement Instances of abusive, harassing, or otherwise unacceptable behavior may be reported to the community leaders responsible for enforcement at private@polaris.apache.org. All complaints will be reviewed and investigated promptly and fairly. All community leaders are obligated to respect the privacy and security of the reporter of any incident.\nEnforcement Guidelines Community leaders will follow these Community Impact Guidelines in determining the consequences for any action they deem in violation of this Code of Conduct:\n1. Correction Community Impact: Use of inappropriate language or other behavior deemed unprofessional or unwelcome in the community.\nConsequence: A private, written warning from community leaders, providing clarity around the nature of the violation and an explanation of why the behavior was inappropriate. A public apology may be requested.\n2. Warning Community Impact: A violation through a single incident or series of actions.\nConsequence: A warning with consequences for continued behavior. No interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, for a specified period of time. This includes avoiding interactions in community spaces as well as external channels like social media. Violating these terms may lead to a temporary or permanent ban.\n3. Temporary Ban Community Impact: A serious violation of community standards, including sustained inappropriate behavior.\nConsequence: A temporary ban from any sort of interaction or public communication with the community for a specified period of time. No public or private interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, is allowed during this period. Violating these terms may lead to a permanent ban.\n4. Permanent Ban Community Impact: Demonstrating a pattern of violation of community standards, including sustained inappropriate behavior, harassment of an individual, or aggression toward or disparagement of classes of individuals.\nConsequence: A permanent ban from any sort of public interaction within the community.\nAttribution This Code of Conduct is adapted from the Contributor Covenant, version 2.1, available at https://www.contributor-covenant.org/version/2/1/code_of_conduct.html.\nCommunity Impact Guidelines were inspired by Mozilla’s code of conduct enforcement ladder.\nFor answers to common questions about this code of conduct, see the FAQ at https://www.contributor-covenant.org/faq. Translations are available at https://www.contributor-covenant.org/translations.\n","categories":"","description":"","excerpt":" Contributor Code of Conduct This is a copy of the Contributor …","ref":"/community/code-of-conduct/","tags":"","title":""},{"body":"In order to help administrators quickly set up and manage their Polaris server, Polaris provides a simple command-line interface (CLI) for common tasks.\nThe basic syntax of the Polaris CLI is outlined below:\npolaris [options] COMMAND ... options: --host --port --client-id --client-secret COMMAND must be one of the following:\ncatalogs principals principal-roles catalog-roles namespaces privileges Each command supports several subcommands, and some subcommands have actions that come after the subcommand in turn. Finally, arguments follow to form a full invocation. Within a set of named arguments at the end of an invocation ordering is generally not important. Many invocations also have a required positional argument of the type that the command refers to. Again, the ordering of this positional argument relative to named arguments is not important.\nSome example full invocations:\npolaris principals list polaris catalogs delete some_catalog_name polaris catalogs update --property foo=bar some_other_catalog polaris catalogs update another_catalog --property k=v polaris privileges namespace grant --namespace some.schema --catalog fourth_catalog --catalog-role some_catalog_role TABLE_READ_DATA Authentication As outlined above, the Polaris CLI may take credentials using the --client-id and --client-secret options. For example:\npolaris --client-id 4b5ed1ca908c3cc2 --client-secret 07ea8e4edefb9a9e57c247e8d1a4f51c principals ... If --client-id and --client-secret are not provided, the Polaris CLI will try to read the client ID and client secret from environment variables called CLIENT_ID and CLIENT_SECRET respectively. If these flags are not provided and the environment variables are not set, the CLI will fail.\nIf the --host and --port options are not provided, the CLI will default to communicating with localhost:8181.\nPATH These examples assume the Polaris CLI is on the PATH and so can be invoked just by the command polaris. You can add the CLI to your PATH environment variable with a command like the following:\nexport PATH=\"~/polaris:$PATH\" Alternatively, you can run the CLI by providing a path to it, such as with the following invocation:\n~/polaris principals list Commands Each of the commands catalogs, principals, principal-roles, catalog-roles, and privileges is used to manage a different type of entity within Polaris.\nTo find details on the options that can be provided to a particular command or subcommand ad-hoc, you may wish to use the --help flag. For example:\npolaris catalogs --help polaris principals create --help catalogs The catalogs command is used to create, discover, and otherwise manage catalogs within Polaris.\ncatalogs supports the following subcommands:\ncreate delete get list update create The create subcommand is used to create a catalog.\ninput: polaris catalogs create --help options: create Named arguments: --type The type of catalog to create in [INTERNAL, EXTERNAL]. INTERNAL by default. --storage-type (Required) The type of storage to use for the catalog --default-base-location (Required) Default base location of the catalog --allowed-location An allowed location for files tracked by the catalog. Multiple locations can be provided by specifying this option more than once. --role-arn (Required for S3) A role ARN to use when connecting to S3 --external-id (Only for S3) The external ID to use when connecting to S3 --tenant-id (Required for Azure) A tenant ID to use when connecting to Azure Storage --multi-tenant-app-name (Only for Azure) The app name to use when connecting to Azure Storage --consent-url (Only for Azure) A consent URL granting permissions for the Azure Storage location --service-account (Only for GCS) The service account to use when connecting to GCS --remote-url (For external catalogs) The remote URL to use --property A key/value pair such as: tag=value. Multiple can be provided by specifying this option more than once Positional arguments: catalog Examples polaris catalogs create \\ --storage-type s3 \\ --default-base-location s3://example-bucket/my_data \\ --role-arn ${ROLE_ARN} \\ my_catalog polaris catalogs create \\ --storage-type s3 \\ --default-base-location s3://example-bucket/my_other_data \\ --allowed-location s3://example-bucket/second_location \\ --allowed-location s3://other-bucket/third_location \\ --role-arn ${ROLE_ARN} \\ my_other_catalog delete The delete subcommand is used to delete a catalog.\ninput: polaris catalogs delete --help options: delete Positional arguments: catalog Examples polaris catalogs delete some_catalog get The get subcommand is used to retrieve details about a catalog.\ninput: polaris catalogs get --help options: get Positional arguments: catalog Examples polaris catalogs get some_catalog polaris catalogs get another_catalog list The list subcommand is used to show details about all catalogs, or those that a certain principal role has access to. The principal used to perform this operation must have the CATALOG_LIST privilege.\ninput: polaris catalogs list --help options: list Named arguments: --principal-role The name of a principal role Examples polaris catalogs list polaris catalogs list --principal-role some_user update The update subcommand is used to update a catalog. Currently, this command supports changing the properties of a catalog or updating its storage configuration.\ninput: polaris catalogs update --help options: update Named arguments: --default-base-location (Required) Default base location of the catalog --allowed-location An allowed location for files tracked by the catalog. Multiple locations can be provided by specifying this option more than once. --property A key/value pair such as: tag=value. Multiple can be provided by specifying this option more than once Positional arguments: catalog Examples polaris catalogs update --property tag=new_value my_catalog polaris catalogs update --default-base-location s3://new-bucket/my_data my_catalog Principals The principals command is used to manage principals within Polaris.\nprincipals supports the following subcommands:\ncreate delete get list rotate-credentials update create The create subcommand is used to create a new principal.\ninput: polaris principals create --help options: create Named arguments: --type The type of principal to create in [SERVICE] --property A key/value pair such as: tag=value. Multiple can be provided by specifying this option more than once Positional arguments: principal Examples polaris principals create some_user polaris principals create --client-id ${CLIENT_ID} --property admin=true some_admin_user delete The delete subcommand is used to delete a principal.\ninput: polaris principals delete --help options: delete Positional arguments: principal Examples polaris principals delete some_user polaris principals delete some_admin_user get The get subcommand retrieves details about a principal.\ninput: polaris principals get --help options: get Positional arguments: principal Examples polaris principals get some_user polaris principals get some_admin_user list The list subcommand shows details about all principals.\nExamples polaris principals list rotate-credentials The rotate-credentials subcommand is used to update the credentials used by a principal. After this command runs successfully, the new credentials will be printed to stdout.\ninput: polaris principals rotate-credentials --help options: rotate-credentials Positional arguments: principal Examples polaris principals rotate-credentials some_user polaris principals rotate-credentials some_admin_user update The update subcommand is used to update a principal. Currently, this supports rewriting the properties associated with a principal.\ninput: polaris principals update --help options: update Named arguments: --property A key/value pair such as: tag=value. Multiple can be provided by specifying this option more than once Positional arguments: principal Examples polaris principals update --property key=value --property other_key=other_value some_user polaris principals update --property are_other_keys_removed=yes some_user Principal Roles The principal-roles command is used to create, discover, and manage principal roles within Polaris. Additionally, this command can identify principals or catalog roles associated with a principal role, and can be used to grant a principal role to a principal.\nprincipal-roles supports the following subcommands:\ncreate delete get list update grant revoke create The create subcommand is used to create a new principal role.\ninput: polaris principal-roles create --help options: create Named arguments: --property A key/value pair such as: tag=value. Multiple can be provided by specifying this option more than once Positional arguments: principal_role Examples polaris principal-roles create data_engineer polaris principal-roles create --property key=value data_analyst delete The delete subcommand is used to delete a principal role.\ninput: polaris principal-roles delete --help options: delete Positional arguments: principal_role Examples polaris principal-roles delete data_engineer polaris principal-roles delete data_analyst get The get subcommand retrieves details about a principal role.\ninput: polaris principal-roles get --help options: get Positional arguments: principal_role Examples polaris principal-roles get data_engineer polaris principal-roles get data_analyst list The list subcommand is used to print out all principal roles or, alternatively, to list all principal roles associated with a given principal or with a given catalog role.\ninput: polaris principal-roles list --help options: list Named arguments: --catalog-role The name of a catalog role. If provided, show only principal roles assigned to this catalog role. --principal The name of a principal. If provided, show only principal roles assigned to this principal. Examples polaris principal-roles list polaris principal-roles --principal d.knuth polaris principal-roles --catalog-role super_secret_data update The update subcommand is used to update a principal role. Currently, this supports updating the properties tied to a principal role.\ninput: polaris principal-roles update --help options: update Named arguments: --property A key/value pair such as: tag=value. Multiple can be provided by specifying this option more than once Positional arguments: principal_role Examples polaris principal-roles update --property key=value2 data_engineer polaris principal-roles update data_analyst --property key=value3 grant The grant subcommand is used to grant a principal role to a principal.\ninput: polaris principal-roles grant --help options: grant Named arguments: --principal A principal to grant this principal role to Positional arguments: principal_role Examples polaris principal-roles grant --principal d.knuth data_engineer polaris principal-roles grant data_scientist --principal a.ng revoke The revoke subcommand is used to revoke a principal role from a principal.\ninput: polaris principal-roles revoke --help options: revoke Named arguments: --principal A principal to revoke this principal role from Positional arguments: principal_role Examples polaris principal-roles revoke --principal former.employee data_engineer polaris principal-roles revoke data_scientist --principal changed.role Catalog Roles The catalog-roles command is used to create, discover, and manage catalog roles within Polaris. Additionally, this command can be used to grant a catalog role to a principal role.\ncatalog-roles supports the following subcommands:\ncreate delete get list update grant revoke create The create subcommand is used to create a new catalog role.\ninput: polaris catalog-roles create --help options: create Named arguments: --catalog The name of an existing catalog --property A key/value pair such as: tag=value. Multiple can be provided by specifying this option more than once Positional arguments: catalog_role Examples polaris catalog-roles create --property key=value --catalog some_catalog sales_data polaris catalog-roles create --catalog other_catalog sales_data delete The delete subcommand is used to delete a catalog role.\ninput: polaris catalog-roles delete --help options: delete Named arguments: --catalog The name of an existing catalog Positional arguments: catalog_role Examples polaris catalog-roles delete --catalog some_catalog sales_data polaris catalog-roles delete --catalog other_catalog sales_data get The get subcommand retrieves details about a catalog role.\ninput: polaris catalog-roles get --help options: get Named arguments: --catalog The name of an existing catalog Positional arguments: catalog_role Examples polaris catalog-roles get --catalog some_catalog inventory_data polaris catalog-roles get --catalog other_catalog inventory_data list The list subcommand is used to print all catalog roles. Alternatively, if a principal role is provided, only catalog roles associated with that principal are shown.\ninput: polaris catalog-roles list --help options: list Named arguments: --principal-role The name of a principal role Positional arguments: catalog Examples polaris catalog-roles list polaris catalog-roles list --principal-role data_engineer update The update subcommand is used to update a catalog role. Currently, only updating properties associated with the catalog role is supported.\ninput: polaris catalog-roles update --help options: update Named arguments: --catalog The name of an existing catalog --property A key/value pair such as: tag=value. Multiple can be provided by specifying this option more than once Positional arguments: catalog_role Examples polaris catalog-roles update --property contains_pii=true --catalog some_catalog sales_data polaris catalog-roles update sales_data --catalog some_catalog --property key=value grant The grant subcommand is used to grant a catalog role to a principal role.\ninput: polaris catalog-roles grant --help options: grant Named arguments: --catalog The name of an existing catalog --principal-role The name of a catalog role Positional arguments: catalog_role Examples polaris catalog-roles grant sensitive_data --catalog some_catalog --principal-role power_user polaris catalog-roles grant --catalog sales_data contains_cc_info_catalog_role --principal-role financial_analyst_role revoke The revoke subcommand is used to revoke a catalog role from a principal role.\ninput: polaris catalog-roles revoke --help options: revoke Named arguments: --catalog The name of an existing catalog --principal-role The name of a catalog role Positional arguments: catalog_role Examples polaris catalog-roles revoke sensitive_data --catalog some_catalog --principal-role power_user polaris catalog-roles revoke --catalog sales_data contains_cc_info_catalog_role --principal-role financial_analyst_role Namespaces The namespaces command is used to manage namespaces within Polaris.\nnamespaces supports the following subcommands:\ncreate delete get list create The create subcommand is used to create a new namespace.\nWhen creating a namespace with an explicit location, that location must reside within the parent catalog or namespace.\ninput: polaris namespaces create --help options: create Named arguments: --catalog The name of an existing catalog --location If specified, the location at which to store the namespace and entities inside it --property A key/value pair such as: tag=value. Multiple can be provided by specifying this option more than once Positional arguments: namespace Examples polaris namespaces create --catalog my_catalog outer polaris namespaces create --catalog my_catalog --location 's3://bucket/outer/inner_SUFFIX' outer.inner delete The delete subcommand is used to delete a namespace.\ninput: polaris namespaces delete --help options: delete Named arguments: --catalog The name of an existing catalog Positional arguments: namespace Examples polaris namespaces delete outer_namespace.inner_namespace --catalog my_catalog polaris namespaces delete --catalog my_catalog outer_namespace get The get subcommand retrieves details about a namespace.\ninput: polaris namespaces get --help options: get Named arguments: --catalog The name of an existing catalog Positional arguments: namespace Examples polaris namespaces get --catalog some_catalog a.b polaris namespaces get a.b.c --catalog some_catalog list The list subcommand shows details about all namespaces directly within a catalog or, optionally, within some parent prefix in that catalog.\ninput: polaris namespaces list --help options: list Named arguments: --catalog The name of an existing catalog --parent If specified, list namespaces inside this parent namespace Examples polaris namespaces list --catalog my_catalog polaris namespaces list --catalog my_catalog --parent a polaris namespaces list --catalog my_catalog --parent a.b Privileges The privileges command is used to grant various privileges to a catalog role, or to revoke those privileges. Privileges can be on the level of a catalog, a namespace, a table, or a view. For more information on privileges, please refer to the docs.\nNote that when using the privileges command, the user specifies the relevant catalog and catalog role before selecting a subcommand.\nprivileges supports the following subcommands:\nlist catalog namespace table view Each of these subcommands, except list, supports the grant and revoke actions and requires an action to be specified.\nNote that each subcommand’s revoke action always accepts the same options that the corresponding grant action does, but with the addition of the cascade option. cascade is used to revoke all other privileges that depend on the specified privilege.\nlist The list subcommand shows details about all privileges for a catalog role.\ninput: polaris privileges list --help options: list Named arguments: --catalog The name of an existing catalog --catalog-role The name of a catalog role Examples polaris privileges list --catalog my_catalog --catalog-role my_role polaris privileges my_role list --catalog-role my_other_role --catalog my_catalog catalog The catalog subcommand manages privileges at the catalog level. grant is used to grant catalog privileges to the specified catalog role, and revoke is used to revoke them.\ninput: polaris privileges catalog --help options: catalog grant Named arguments: --catalog The name of an existing catalog --catalog-role The name of a catalog role Positional arguments: privilege revoke Named arguments: --cascade When revoking privileges, additionally revoke privileges that depend on the specified privilege --catalog The name of an existing catalog --catalog-role The name of a catalog role Positional arguments: privilege Examples polaris privileges \\ catalog \\ grant \\ --catalog my_catalog \\ --catalog-role catalog_role \\ TABLE_CREATE polaris privileges \\ catalog \\ revoke \\ --catalog my_catalog \\ --catalog-role catalog_role \\ --cascade \\ TABLE_CREATE namespace The namespace subcommand manages privileges at the namespace level.\ninput: polaris privileges namespace --help options: namespace grant Named arguments: --namespace A period-delimited namespace --catalog The name of an existing catalog --catalog-role The name of a catalog role Positional arguments: privilege revoke Named arguments: --namespace A period-delimited namespace --cascade When revoking privileges, additionally revoke privileges that depend on the specified privilege --catalog The name of an existing catalog --catalog-role The name of a catalog role Positional arguments: privilege Examples polaris privileges \\ namespace \\ grant \\ --catalog my_catalog \\ --catalog-role catalog_role \\ --namespace a.b \\ TABLE_LIST polaris privileges \\ namespace \\ revoke \\ --catalog my_catalog \\ --catalog-role catalog_role \\ --namespace a.b \\ TABLE_LIST table The table subcommand manages privileges at the table level.\ninput: polaris privileges table --help options: table grant Named arguments: --namespace A period-delimited namespace --table The name of a table --catalog The name of an existing catalog --catalog-role The name of a catalog role Positional arguments: privilege revoke Named arguments: --namespace A period-delimited namespace --table The name of a table --cascade When revoking privileges, additionally revoke privileges that depend on the specified privilege --catalog The name of an existing catalog --catalog-role The name of a catalog role Positional arguments: privilege Examples polaris privileges \\ table \\ grant \\ --catalog my_catalog \\ --catalog-role catalog_role \\ --namespace a.b \\ --table t \\ TABLE_DROP polaris privileges \\ table \\ grant \\ --catalog my_catalog \\ --catalog-role catalog_role \\ --namespace a.b \\ --table t \\ --cascade \\ TABLE_DROP view The view subcommand manages privileges at the view level.\ninput: polaris privileges view --help options: view grant Named arguments: --namespace A period-delimited namespace --view The name of a view --catalog The name of an existing catalog --catalog-role The name of a catalog role Positional arguments: privilege revoke Named arguments: --namespace A period-delimited namespace --view The name of a view --cascade When revoking privileges, additionally revoke privileges that depend on the specified privilege --catalog The name of an existing catalog --catalog-role The name of a catalog role Positional arguments: privilege Examples polaris privileges \\ view \\ grant \\ --catalog my_catalog \\ --catalog-role catalog_role \\ --namespace a.b.c \\ --view v \\ VIEW_FULL_METADATA polaris privileges \\ view \\ grant \\ --catalog my_catalog \\ --catalog-role catalog_role \\ --namespace a.b.c \\ --view v \\ --cascade \\ VIEW_FULL_METADATA Examples This section outlines example code for a few common operations as well as for some more complex ones.\nFor especially complex operations, you may wish to instead directly use the Python API.\nCreating a principal and a catalog polaris principals create my_user polaris catalogs create \\ --type internal \\ --storage-type s3 \\ --default-base-location s3://iceberg-bucket/polaris-base \\ --role-arn arn:aws:iam::111122223333:role/ExampleCorpRole \\ --allowed-location s3://iceberg-bucket/polaris-alt-location-1 \\ --allowed-location s3://iceberg-bucket/polaris-alt-location-2 \\ my_catalog Granting a principal the ability to manage the content of a catalog polaris principal-roles create power_user polaris principal-roles grant --principal my_user power_user polaris catalog-roles create --catalog my_catalog my_catalog_role polaris catalog-roles grant \\ --catalog my_catalog \\ --principal-role power_user \\ my_catalog_role polaris privileges \\ catalog \\ --catalog my_catalog \\ --catalog-role my_catalog_role \\ grant \\ CATALOG_MANAGE_CONTENT Identifying the tables a given principal has been granted explicit access to read Note that some other privileges, such as CATALOG_MANAGE_CONTENT, subsume TABLE_READ_DATA and would not be discovered here.\nprincipal_roles=$(polaris principal-roles list --principal my_principal) for principal_role in ${principal_roles}; do catalog_roles=$(polaris catalog-roles --list --principal-role \"${principal_role}\") for catalog_role in ${catalog_roles}; do grants=$(polaris privileges list --catalog-role \"${catalog_role}\" --catalog \"${catalog}\") for grant in $(echo \"${grants}\" | jq -c '.[] | select(.privilege == \"TABLE_READ_DATA\")'); do echo \"${grant}\" fi done done done ","categories":"","description":"","excerpt":"In order to help administrators quickly set up and manage their …","ref":"/in-dev/unreleased/command-line-interface/","tags":"","title":"Apache Polaris (Incubating) CLI"},{"body":" Learn, Connect and Collaborate\nSlack\nPublic chat, open to everybody\nZulip\nPublic chat, open to everybody\nCommunity Meetings\nUpcoming, live and recorded Community Meetings\nProposals\nProposals about bigger topics\nGitHub\nDevelopment takes place here!\nCode of Conduct\nCode of Conduct\nChat Bylaws\nA few rules around our public chat as a collaboration tool for the project.\nContribution Guidelines\nHow to contribute to Apache Polaris\nAll Mailing Lists\nDevelopment oriented content\nSubscribe to dev@\nMailing List Archives\nNotifications about GitHub issues and PRs\nSubscribe to issues@\nMailing List Archives\nNotifications about Git commits\nSubscribe to commits@\nMailing List Archives\nTeam\nAlex Dutra\nCommitter\nDremio\nAnna Filippova\nCommitter\nSnowflake\nAnoop Johnson\nPPMC Member\nGoogle\nAshvin Agrawal\nPPMC Member\nMicrosoft\nBertrand Delacretaz\nMentor\nDennis Huo\nCommitter\nSnowflake\nDmitri Bourlatchkov\nCommitter\nDremio\nEric Maynard\nCommitter\nSnowflake\nHolden Karau\nMentor\nJack Ye\nPPMC Member\nAmazon\nJB Onofre\nPPMC Member \u0026 Mentor\nDremio\nJohn Roesler\nPPMC Member\nConfluent\nKent Yao\nMentor\nMichael Collado\nCommitter\nSnowflake\nRobert Stupp\nPPMC Member\nDremio\nRussell Spitzer\nPPMC\nSnowflake\nRyan Blue\nMentor\nTyler Akidau\nPPMC Member\nSnowflake\nYong Zheng\nCommitter\nYufei Gu\nCommitter\nSnowflake\nYuya Ebihara\nCommitter\nStarburst\n","categories":"","description":"","excerpt":" Learn, Connect and Collaborate\nSlack\nPublic chat, open to everybody …","ref":"/community/","tags":"","title":"Apache Polaris Community"},{"body":" Apache Polaris - Project Chat Bylaws Apache Polaris is currently undergoing Incubation at the Apache Software Foundation.\nMotivation Apache Polaris uses two public and open chat services:\nSlack workspace (join here) Zuplip hosted at https://polaris-catalog.zulipchat.com A few rules shall ensure that the chat conforms to the rules and best practices of the Apache Software Foundation and serves well as a collaboration tool for the project.\nOrganizations and other open-source projects that contribute continuously and significantly to Polaris are welcome, but shall not use the Polaris chat as a vehicle for their own marketing without explicit approval of the project (P)PMC.\nCode of Conduct The Apache Software Foundation’s Code of Conduct applies to the Polaris project public chat.\nGovernance The Polaris project’s chat tool is not provided by the ASF - the Polaris project (P)PMC members govern and monitor the chat service. Everybody is welcome to join the Polaris project chat. Invites are not needed. All users are automatically promoted to “members” (don’t stay in “guests”). Polaris project (P)PMC members have “owner” privileges on the Zulip and Slack chat. Polaris project committers are granted “moderator” or “administrator” privileges for moderation purposes. This bylaws document shall be published on the project’s web site and linked from relevant public channels. Only (P)PMC members are allowed to create new channels. The number of channels shall be limited to #general (user discussions), #dev (development discussions), #announcements (release announcements), and #noise (GitHub feed). Only (P)PMC members are allowed to notify a large number of users (aka @here). 3rd Parties Definition: “3rd party” means any (other) open-source project or any commercial vendor or any other organization.\n3rd Party Channels 3rd parties who contribute to or use the Polaris project may ask the (P)PMC to get a dedicated public channel, for example #vendor- or #project-. Promotion of 3rd party content is only permitted in these 3rd party channels, and only if the content primarily covers Polaris. Commercial advertisements in any form are prohibited. Interaction with users of 3rd party OSS projects or commercial products should be directed to these 3rd party channels. Content moderation Any content which violates the Apache “Code of Conduct” will be removed. Any commercial advertisements will be removed. All other content will not be moderated. ","categories":"","description":"","excerpt":" Apache Polaris - Project Chat Bylaws Apache Polaris is currently …","ref":"/community/chat-bylaws/","tags":"","title":""},{"body":"This page documents various entities that can be managed in Apache Polaris (Incubating).\nCatalog A catalog is a top-level entity in Polaris that may contain other entities like namespaces and tables. These map directly to Apache Iceberg catalogs.\nFor information on managing catalogs with the REST API or for more information on what data can be associated with a catalog, see the API docs.\nStorage Type All catalogs in Polaris are associated with a storage type. Valid Storage Types are S3, Azure, and GCS. The FILE type is also additionally available for testing. Each of these types relates to a different storage provider where data within the catalog may reside. Depending on the storage type, various other configurations may be set for a catalog including credentials to be used when accessing data inside the catalog.\nFor details on how to use Storage Types in the REST API, see the API docs.\nNamespace A namespace is a logical entity that resides within a catalog and can contain other entities such as tables or views. Some other systems may refer to namespaces as schemas or databases.\nIn Polaris, namespaces can be nested. For example, a.b.c.d.e.f.g is a valid namespace. b is said to reside within a, and so on.\nFor information on managing namespaces with the REST API or for more information on what data can be associated with a namespace, see the API docs.\nTable Polaris tables are entities that map to Apache Iceberg tables.\nFor information on managing tables with the REST API or for more information on what data can be associated with a table, see the API docs.\nView Polaris views are entities that map to Apache Iceberg views.\nFor information on managing views with the REST API or for more information on what data can be associated with a view, see the API docs.\nPrincipal Polaris principals are unique identities that can be used to represent users or services. Each principal may have one or more principal roles assigned to it for the purpose of accessing catalogs and the entities within them.\nFor information on managing principals with the REST API or for more information on what data can be associated with a principal, see the API docs.\nPrincipal Role Polaris principal roles are labels that may be granted to principals. Each principal may have one or more principal roles, and the same principal role may be granted to multiple principals. Principal roles may be assigned based on the persona or responsibilities of a given principal, or on how that principal will need to access different entities within Polaris.\nFor information on managing principal roles with the REST API or for more information on what data can be associated with a principal role, see the API docs.\nCatalog Role Polaris catalog roles are labels that may be granted to catalogs. Each catalog may have one or more catalog roles, and the same catalog role may be granted to multiple catalogs. Catalog roles may be assigned based on the nature of data that will reside in a catalog, or by the groups of users and services that might need to access that data.\nEach catalog role may have multiple privileges granted to it, and each catalog role can be granted to one or more principal roles. This is the mechanism by which principals are granted access to entities inside a catalog such as namespaces and tables.\nPrivilege Polaris privileges are granted to catalog roles in order to grant principals with a given principal role some degree of access to catalogs with a given catalog role. When a privilege is granted to a catalog role, any principal roles granted that catalog role receive the privilege. In turn, any principals who are granted that principal role receive it.\nA privilege can be scoped to any entity inside a catalog, including the catalog itself.\nFor a list of supported privileges for each privilege class, see the API docs:\nTable Privileges View Privileges Namespace Privileges Catalog Privileges ","categories":"","description":"","excerpt":"This page documents various entities that can be managed in Apache …","ref":"/in-dev/unreleased/entities/","tags":"","title":"Entities"},{"body":"This section provides information about how access control works for Apache Polaris (Incubating).\nPolaris uses a role-based access control (RBAC) model in which the Polaris administrator assigns access privileges to catalog roles and then grants access to resources to service principals by assigning catalog roles to principal roles.\nThese are the key concepts to understanding access control in Polaris:\nSecurable object Principal role Catalog role Privilege Securable object A securable object is an object to which access can be granted. Polaris has the following securable objects:\nCatalog Namespace Iceberg table View Principal role A principal role is a resource in Polaris that you can use to logically group Polaris service principals together and grant privileges on securable objects.\nPolaris supports a many-to-one relationship between service principals and principal roles. For example, to grant the same privileges to multiple service principals, you can grant a single principal role to those service principals. A service principal can be granted one principal role. When registering a service connection, the Polaris administrator specifies the principal role that is granted to the service principal.\nYou don’t grant privileges directly to a principal role. Instead, you configure object permissions at the catalog role level, and then grant catalog roles to a principal role.\nThe following table shows examples of principal roles that you might configure in Polaris:\nPrincipal role name Description Data_engineer A role that is granted to multiple service principals for running data engineering jobs. Data_scientist A role that is granted to multiple service principals for running data science or AI jobs. Catalog role A catalog role belongs to a particular catalog resource in Polaris and specifies a set of permissions for actions on the catalog or objects in the catalog, such as catalog namespaces or tables. You can create one or more catalog roles for a catalog.\nYou grant privileges to a catalog role and then grant the catalog role to a principal role to bestow the privileges to one or more service principals.\nNote\nIf you update the privileges bestowed to a service principal, the updates won’t take effect for up to one hour. This means that if you revoke or grant some privileges for a catalog, the updated privileges won’t take effect on any service principal with access to that catalog for up to one hour.\nPolaris also supports a many-to-many relationship between catalog roles and principal roles. You can grant the same catalog role to one or more principal roles. Likewise, a principal role can be granted to one or more catalog roles.\nThe following table displays examples of catalog roles that you might configure in Polaris:\nExample Catalog role Description Catalog administrators A role that has been granted multiple privileges to emulate full access to the catalog.Principal roles that have been granted this role are permitted to create, alter, read, write, and drop tables in the catalog. Catalog readers A role that has been granted read-only privileges to tables in the catalog.Principal roles that have been granted this role are allowed to read from tables in the catalog. Catalog contributor A role that has been granted read and write access privileges to all tables that belong to the catalog.Principal roles that have been granted this role are allowed to perform read and write operations on tables in the catalog. RBAC model The following diagram illustrates the RBAC model used by Polaris. For each catalog, the Polaris administrator assigns access privileges to catalog roles and then grants service principals access to resources by assigning catalog roles to principal roles. Polaris supports a many-to-one relationship between service principals and principal roles.\nAccess control privileges This section describes the privileges that are available in the Polaris access control model. Privileges are granted to catalog roles, catalog roles are granted to principal roles, and principal roles are granted to service principals to specify the operations that service principals can perform on objects in Polaris.\nImportant\nYou can only grant privileges at the catalog level. Fine-grained access controls are not available. For example, you can grant read privileges to all tables in a catalog but not to an individual table in the catalog.\nTo grant the full set of privileges (drop, list, read, write, etc.) on an object, you can use the full privilege option.\nTable privileges Privilege Description TABLE_CREATE Enables registering a table with the catalog. TABLE_DROP Enables dropping a table from the catalog. TABLE_LIST Enables listing any tables in the catalog. TABLE_READ_PROPERTIES Enables reading properties of the table. TABLE_WRITE_PROPERTIES Enables configuring properties for the table. TABLE_READ_DATA Enables reading data from the table by receiving short-lived read-only storage credentials from the catalog. TABLE_WRITE_DATA Enables writing data to the table by receiving short-lived read+write storage credentials from the catalog. TABLE_FULL_METADATA Grants all table privileges, except TABLE_READ_DATA and TABLE_WRITE_DATA, which need to be granted individually. View privileges Privilege Description VIEW_CREATE Enables registering a view with the catalog. VIEW_DROP Enables dropping a view from the catalog. VIEW_LIST Enables listing any views in the catalog. VIEW_READ_PROPERTIES Enables reading all the view properties. VIEW_WRITE_PROPERTIES Enables configuring view properties. VIEW_FULL_METADATA Grants all view privileges. Namespace privileges Privilege Description NAMESPACE_CREATE Enables creating a namespace in a catalog. NAMESPACE_DROP Enables dropping the namespace from the catalog. NAMESPACE_LIST Enables listing any object in the namespace, including nested namespaces and tables. NAMESPACE_READ_PROPERTIES Enables reading all the namespace properties. NAMESPACE_WRITE_PROPERTIES Enables configuring namespace properties. NAMESPACE_FULL_METADATA Grants all namespace privileges. Catalog privileges Privilege Description CATALOG_MANAGE_ACCESS Includes the ability to grant or revoke privileges on objects in a catalog to catalog roles, and the ability to grant or revoke catalog roles to or from principal roles. CATALOG_MANAGE_CONTENT Enables full management of content for the catalog. This privilege encompasses the following privileges:CATALOG_MANAGE_METADATATABLE_FULL_METADATANAMESPACE_FULL_METADATAVIEW_FULL_METADATATABLE_WRITE_DATATABLE_READ_DATACATALOG_READ_PROPERTIESCATALOG_WRITE_PROPERTIES CATALOG_MANAGE_METADATA Enables full management of the catalog, catalog roles, namespaces, and tables. CATALOG_READ_PROPERTIES Enables listing catalogs and reading properties of the catalog. CATALOG_WRITE_PROPERTIES Enables configuring catalog properties. RBAC example The following diagram illustrates how RBAC works in Polaris and includes the following users:\nAlice: A service admin who signs up for Polaris. Alice can create service principals. She can also create catalogs and namespaces and configure access control for Polaris resources.\nBob: A data engineer who uses Apache Spark™ to interact with Polaris.\nAlice has created a service principal for Bob. It has been granted the Data_engineer principal role, which in turn has been granted the following catalog roles: Catalog contributor and Data administrator (for both the Silver and Gold zone catalogs in the following diagram).\nThe Catalog contributor role grants permission to create namespaces and tables in the Bronze zone catalog.\nThe Data administrator roles grant full administrative rights to the Silver zone catalog and Gold zone catalog.\nMark: A data scientist who uses trains models with data managed by Polaris.\nAlice has created a service principal for Mark. It has been granted the Data_scientist principal role, which in turn has been granted the catalog role named Catalog reader.\nThe Catalog reader role grants read-only access for a catalog named Gold zone catalog.\n","categories":"","description":"","excerpt":"This section provides information about how access control works for …","ref":"/in-dev/unreleased/access-control/","tags":"","title":"Access Control"},{"body":" Contributing to Apache Polaris Thank you for considering contributing to Apache Polaris. Any contribution (code, test cases, documentation, use cases, …) is valuable!\nThis documentation will help you get started.\nContribute bug reports and feature requests You can report an issue in the Polaris Catalog issue tracker.\nHow to report a bug Note: If you find a security vulnerability, do NOT open an issue. Please email security@apache.org instead.\nWhen filing an issue, make sure to answer these five questions:\nWhat version of Apache Polaris are you using? What operating system and processor architecture are you using? What did you do? What did you expect to see? What did you see instead? Troubleshooting questions should be posted on:\nSlack Zulip dev mailing list (you can subscribe) instead of the issue tracker. Maintainers and community members will answer your questions there or ask you to file an issue if you’ve encountered a bug.\nHow to suggest a feature or enhancement Apache Polaris aims to provide the Apache Iceberg community with new levels of choice, flexibility and control over their data, with full enterprise security and Apache Iceberg interoperability with Amazon Web Services (AWS), Confluent, Dremio, Google Cloud, Microsoft Azure, Salesforce and more.\nIf you’re looking for a feature that doesn’t exist in Apache Polaris, you’re probably not alone. Others likely have similar needs. Please open a GitHub Issue describing the feature you’d like to see, why you need it, and how it should work.\nWhen creating your feature request, document your requirements first. Please, try to not directly describe the solution.\nBefore you begin contributing code Review open issues and discuss your approach If you want to dive into development yourself then you can check out existing open issues or requests for features that need to be implemented. Take ownership of an issue and try fix it.\nBefore starting on a large code change, please describe the concept/design of what you plan to do on the issue/feature request you intend to address. If unsure if the design is good or will be accepted, discuss it with the community in the respective issue first, before you do too much active development.\nProvide your changes in a Pull Request The best way to provide changes is to fork Apache Polaris repository on GitHub and provide a Pull Request with your changes. To make it easy to apply your changes please use the following conventions:\nEvery Pull Request should have a matching GitHub Issue. Create a branch that will house your change: git clone https://github.com/apache/polaris cd polaris git fetch --all git checkout -b my-branch origin/main Don’t forget to periodically rebase your branch:\ngit pull --rebase git push GitHubUser my-branch --force Ensure the code is properly formatted:\n./gradlew format Pull Requests should be based on the main branch. Test that your changes works by adapting or adding tests. Verify the build passes (see README.md for build instructions). If your Pull Request has conflicts with the main branch, please rebase and fix the conflicts. Java version requirements The Apache Polaris build currently requires Java 21 or later. There are a few tools that help you running the right Java version:\nSDKMAN! follow the installation instructions, then run sdk list java to see the available distributions and versions, then run sdk install java \u003cidentifer from list\u003e using the identifier for the distribution and version (\u003e= 21) of your choice. jenv If on a Mac you can use jenv to set the appropriate SDK. ","categories":"","description":"","excerpt":" Contributing to Apache Polaris Thank you for considering contributing …","ref":"/community/contributing-guidelines/","tags":"","title":""},{"body":"The default polaris-server.yml configuration is intended for development and testing. When deploying Polaris in production, there are several best practices to keep in mind.\nSecurity Configurations Notable configuration used to secure a Polaris deployment are outlined below.\noauth2 [!WARNING]\nEnsure that the tokenBroker setting reflects the token broker specified in authenticator below.\nConfigure OAuth with this setting. Remove the TestInlineBearerTokenPolarisAuthenticator option and uncomment the DefaultPolarisAuthenticator authenticator option beneath it. Then, configure the token broker. You can configure the token broker to use either asymmetric or symmetric keys. authenticator.tokenBroker [!WARNING]\nEnsure that the tokenBroker setting reflects the token broker specified in oauth2 above.\ncallContextResolver \u0026 realmContextResolver Use these configurations to specify a service that can resolve a realm from bearer tokens. The service(s) used here must implement the relevant interfaces (i.e. CallContextResolver and RealmContextResolver). Metastore Management [!IMPORTANT]\nThe default in-memory implementation for metastoreManager is meant for testing and not suitable for production usage. Instead, consider an implementation such as eclipse-link which allows you to store metadata in a remote database.\nA Metastore Manger should be configured with an implementation that durably persists Polaris entities. Use the configuration metaStoreManager to configure a MetastoreManager implementation where Polaris entities will be persisted.\nBe sure to secure your metastore backend since it will be storing credentials and catalog metadata.\nConfiguring EclipseLink To use EclipseLink for metastore management, specify the configuration metaStoreManager.conf-file to point to an EclipseLink persistence.xml file. This file, local to the Polaris service, contains details of the database used for metastore management and the connection settings. For more information, refer to the metastore documentation.\n[!IMPORTANT] EclipseLink requires\nBuilding the JAR for the EclipseLink extension Setting the eclipseLink gradle property to true. This can be achieved by setting eclipseLink=true in the gradle.properties file, or by passing the property explicitly while building all JARs, e.g.: ./gradlew -PeclipseLink=true clean assemble\nBootstrapping Before using Polaris when using a metastore manager other than in-memory, you must bootstrap the metastore manager. This is a manual operation that must be performed only once in order to prepare the metastore manager to integrate with Polaris. When the metastore manager is bootstrapped, any existing Polaris entities in the metastore manager may be purged.\nBy default, Polaris will create randomised CLIENT_ID and CLIENT_SECRET for the root principal and store their hashes in the metastore backend. In order to provide your own credentials for root principal (so you can request tokens via api/catalog/v1/oauth/tokens), set the POLARIS_BOOTSTRAP_CREDENTIALS environment variable as follows:\nexport POLARIS_BOOTSTRAP_CREDENTIALS=my_realm,root,my-client-id,my-client-secret The format of the environment variable is realm,principal,client_id,client_secret. You can provide multiple credentials separated by ;. For example, to provide credentials for two realms my_realm and my_realm2:\nexport POLARIS_BOOTSTRAP_CREDENTIALS=my_realm,root,my-client-id,my-client-secret;my_realm2,root,my-client-id2,my-client-secret2 You can also provide credentials for other users too.\nIt is also possible to use system properties to provide the credentials:\njava -Dpolaris.bootstrap.credentials=my_realm,root,my-client-id,my-client-secret -jar /path/to/jar/polaris-service-all.jar bootstrap polaris-server.yml Now, to bootstrap Polaris, run:\njava -jar /path/to/jar/polaris-service-all.jar bootstrap polaris-server.yml or in a container:\nbin/polaris-service bootstrap config/polaris-server.yml Afterward, Polaris can be launched normally:\njava -jar /path/to/jar/polaris-service-all.jar server polaris-server.yml You can verify the setup by attempting a token issue for the root principal:\ncurl -X POST http://localhost:8181/api/catalog/v1/oauth/tokens -d \"grant_type=client_credentials\u0026client_id=my-client-id\u0026client_secret=my-client-secret\u0026scope=PRINCIPAL_ROLE:ALL\" which should return:\n{\"access_token\":\"...\",\"token_type\":\"bearer\",\"issued_token_type\":\"urn:ietf:params:oauth:token-type:access_token\",\"expires_in\":3600} Note that if you used non-default realm name, for example, iceberg instead of default-realm in your polaris-server.yml, then you should add an appropriate request header:\ncurl -X POST -H 'realm: iceberg' http://localhost:8181/api/catalog/v1/oauth/tokens -d \"grant_type=client_credentials\u0026client_id=my-client-id\u0026client_secret=my-client-secret\u0026scope=PRINCIPAL_ROLE:ALL\" Other Configurations When deploying Polaris in production, consider adjusting the following configurations:\nfeatureConfiguration.SUPPORTED_CATALOG_STORAGE_TYPES By default Polaris catalogs are allowed to be located in local filesystem with the FILE storage type. This should be disabled for production systems. Use this configuration to additionally disable any other storage types that will not be in use. ","categories":"","description":"","excerpt":"The default polaris-server.yml configuration is intended for …","ref":"/in-dev/unreleased/configuring-polaris-for-production/","tags":"","title":"Configuring Apache Polaris (Incubating) for Production"},{"body":"This page documents important configurations for connecting to production database through EclipseLink.\nPolaris Server Configuration Configure the metaStoreManager section in the Polaris configuration (polaris-server.yml by default) as follows:\nmetaStoreManager: type: eclipse-link conf-file: META-INF/persistence.xml persistence-unit: polaris conf-file must point to an EclipseLink configuration file\nBy default, conf-file points to the embedded resource file META-INF/persistence.xml in the polaris-eclipselink module.\nIn order to specify a configuration file outside the classpath, follow these steps.\nPlace persistence.xml into a jar file: jar cvf /tmp/conf.jar persistence.xml Use conf-file: /tmp/conf.jar!/persistence.xml EclipseLink Configuration - persistence.xml The configuration file persistence.xml is used to set up the database connection properties, which can differ depending on the type of database and its configuration.\nCheck out the default persistence.xml for a complete sample for connecting to the file-based H2 database.\nPolaris creates and connects to a separate database for each realm. Specifically, the {realm} placeholder in jakarta.persistence.jdbc.url is substituted with the actual realm name, allowing the Polaris server to connect to different databases based on the realm.\nNote: some database systems such as Postgres don’t create databases automatically. Database admins need to create them manually before running Polaris server.\n\u003cpersistence-unit name=\"polaris\" transaction-type=\"RESOURCE_LOCAL\"\u003e \u003cprovider\u003eorg.eclipse.persistence.jpa.PersistenceProvider\u003c/provider\u003e \u003cclass\u003eorg.apache.polaris.jpa.models.ModelEntity\u003c/class\u003e \u003cclass\u003eorg.apache.polaris.jpa.models.ModelEntityActive\u003c/class\u003e \u003cclass\u003eorg.apache.polaris.jpa.models.ModelEntityChangeTracking\u003c/class\u003e \u003cclass\u003eorg.apache.polaris.jpa.models.ModelEntityDropped\u003c/class\u003e \u003cclass\u003eorg.apache.polaris.jpa.models.ModelGrantRecord\u003c/class\u003e \u003cclass\u003eorg.apache.polaris.jpa.models.ModelPrincipalSecrets\u003c/class\u003e \u003cclass\u003eorg.apache.polaris.jpa.models.ModelSequenceId\u003c/class\u003e \u003cshared-cache-mode\u003eNONE\u003c/shared-cache-mode\u003e \u003cproperties\u003e \u003cproperty name=\"jakarta.persistence.jdbc.url\" value=\"jdbc:h2:file:tmp/polaris_test/filedb_{realm}\"/\u003e \u003cproperty name=\"jakarta.persistence.jdbc.user\" value=\"sa\"/\u003e \u003cproperty name=\"jakarta.persistence.jdbc.password\" value=\"\"/\u003e \u003cproperty name=\"jakarta.persistence.schema-generation.database.action\" value=\"create\"/\u003e \u003c/properties\u003e \u003c/persistence-unit\u003e A single persistence.xml can describe multiple persistence units. For example, with both a polaris-dev and polaris persistence unit defined, you could use a single persistence.xml to easily switch between development and production databases. Use persistence-unit in the Polaris server configuration to easily switch between persistence units.\nTo build Polaris with the necessary H2 dependency and start the Polaris service, run the following:\npolaris\u003e ./gradlew --no-daemon --info -PeclipseLink=true -PeclipseLinkDeps=com.h2database:h2:2.3.232 clean shadowJar polaris\u003e java -jar dropwizard/service/build/libs/polaris-dropwizard-service-*.jar server ./polaris-server.yml Postgres The following shows a sample configuration for integrating Polaris with Postgres.\n\u003cpersistence-unit name=\"polaris\" transaction-type=\"RESOURCE_LOCAL\"\u003e \u003cprovider\u003eorg.eclipse.persistence.jpa.PersistenceProvider\u003c/provider\u003e \u003cclass\u003eorg.apache.polaris.jpa.models.ModelEntity\u003c/class\u003e \u003cclass\u003eorg.apache.polaris.jpa.models.ModelEntityActive\u003c/class\u003e \u003cclass\u003eorg.apache.polaris.jpa.models.ModelEntityChangeTracking\u003c/class\u003e \u003cclass\u003eorg.apache.polaris.jpa.models.ModelEntityDropped\u003c/class\u003e \u003cclass\u003eorg.apache.polaris.jpa.models.ModelGrantRecord\u003c/class\u003e \u003cclass\u003eorg.apache.polaris.jpa.models.ModelPrincipalSecrets\u003c/class\u003e \u003cclass\u003eorg.apache.polaris.jpa.models.ModelSequenceId\u003c/class\u003e \u003cshared-cache-mode\u003eNONE\u003c/shared-cache-mode\u003e \u003cproperties\u003e \u003cproperty name=\"jakarta.persistence.jdbc.url\" value=\"jdbc:postgresql://localhost:5432/{realm}\"/\u003e \u003cproperty name=\"jakarta.persistence.jdbc.user\" value=\"postgres\"/\u003e \u003cproperty name=\"jakarta.persistence.jdbc.password\" value=\"postgres\"/\u003e \u003cproperty name=\"jakarta.persistence.schema-generation.database.action\" value=\"create\"/\u003e \u003cproperty name=\"eclipselink.persistence-context.flush-mode\" value=\"auto\"/\u003e \u003c/properties\u003e \u003c/persistence-unit\u003e To build Polaris with the necessary Postgres dependency and start the Polaris service, run the following:\npolaris\u003e ./gradlew --no-daemon --info -PeclipseLink=true -PeclipseLinkDeps=org.postgresql:postgresql:42.7.4 clean shadowJar polaris\u003e java -jar dropwizard/service/build/libs/polaris-dropwizard-service-*.jar server ./polaris-server.yml ","categories":"","description":"","excerpt":"This page documents important configurations for connecting to …","ref":"/in-dev/unreleased/metastores/","tags":"","title":"Metastores"},{"body":" Top ","categories":"","description":"","excerpt":" Top ","ref":"/in-dev/unreleased/polaris-management-service/","tags":"","title":"Apache Polaris Management Service OpenAPI"},{"body":" Top ","categories":"","description":"","excerpt":" Top ","ref":"/in-dev/unreleased/rest-catalog-open-api/","tags":"","title":"Apache Iceberg OpenAPI"},{"body":" Welcome to the Apache Polaris™ (incubating) web site! Apache Polaris is an open-source, fully-featured catalog for Apache Iceberg™. It implements Iceberg's REST API, enabling seamless multi-engine interoperability across a wide range of platforms, including Apache Doris™, Apache Flink®, Apache Spark™, StarRocks, and Trino. Join the community!\nChat with users and project developers!\nChat with us\nContributions welcome!\nWe do a Pull Request contributions workflow on GitHub. New users are always welcome!\nPolaris Pull Requests\nJoin our mailing list\nFor announcement and discussions about the project.\nSubscribe\nApache Polaris™ is an effort undergoing incubation at The Apache Software Foundation (ASF), sponsored by the Apache Incubator. Incubation is required of all newly accepted projects until a further review indicates that the infrastructure, communications, and decision making process have stabilized in a manner consistent with other successful ASF projects. While incubation status is not necessarily a reflection of the completeness or stability of the code, it does indicate that the project has yet to be fully endorsed by the ASF. Apache®, Apache Polaris™, Apache Iceberg™, Apache Spark™ are either registered trademarks or trademarks of the Apache Software Foundation in the United States and/or other countries. ","categories":"","description":"","excerpt":" Welcome to the Apache Polaris™ (incubating) web site! Apache Polaris …","ref":"/","tags":"","title":"Apache Polaris"},{"body":"Just a dummy\n","categories":"","description":"","excerpt":"Just a dummy\n","ref":"/blog/2024/10/01/dummy-post/","tags":"","title":"Dummy Post"},{"body":" Please find all released Polaris versions in the sidebar.\nInfo The whole releases/ folder lives in a separate Git branch versioned-docs in the Polaris main repository. The main source tree would does not contain the releases/ folder - the site itself renders fine for local development even without the releases/ folder.\n","categories":"","description":"","excerpt":" Please find all released Polaris versions in the sidebar.\nInfo The …","ref":"/releases/","tags":"","title":"All Apache Polaris Versions"},{"body":"","categories":"","description":"","excerpt":"","ref":"/categories/","tags":"","title":"Categories"},{"body":"== Apache Polaris version [unreleased]\nDownload from …\n","categories":"","description":"","excerpt":"== Apache Polaris version [unreleased]\nDownload from …\n","ref":"/in-dev/release_index/","tags":"","title":"POLARIS VERSION INDEX MD TEMPLATE"},{"body":"","categories":"","description":"","excerpt":"","ref":"/tags/","tags":"","title":"Tags"}]